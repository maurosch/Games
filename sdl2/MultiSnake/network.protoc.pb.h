// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network.protoc

#ifndef PROTOBUF_network_2eprotoc__INCLUDED
#define PROTOBUF_network_2eprotoc__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace network {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_network_2eprotoc();
void protobuf_AssignDesc_network_2eprotoc();
void protobuf_ShutdownFile_network_2eprotoc();

class PositionSnakePart;
class StrawBerry;
class Snake;
class FromServerToClient;
class FromClientToServer;
class FirstMessageFromServerToClient;

enum Snake_RGBColor {
  Snake_RGBColor_RED = 0,
  Snake_RGBColor_GREEN = 1,
  Snake_RGBColor_BLUE = 2,
  Snake_RGBColor_GREY = 3,
  Snake_RGBColor_YELLOW = 4,
  Snake_RGBColor_ORANGE = 5,
  Snake_RGBColor_VIOLET = 6,
  Snake_RGBColor_BROWN = 7
};
bool Snake_RGBColor_IsValid(int value);
const Snake_RGBColor Snake_RGBColor_RGBColor_MIN = Snake_RGBColor_RED;
const Snake_RGBColor Snake_RGBColor_RGBColor_MAX = Snake_RGBColor_BROWN;
const int Snake_RGBColor_RGBColor_ARRAYSIZE = Snake_RGBColor_RGBColor_MAX + 1;

const ::google::protobuf::EnumDescriptor* Snake_RGBColor_descriptor();
inline const ::std::string& Snake_RGBColor_Name(Snake_RGBColor value) {
  return ::google::protobuf::internal::NameOfEnum(
    Snake_RGBColor_descriptor(), value);
}
inline bool Snake_RGBColor_Parse(
    const ::std::string& name, Snake_RGBColor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Snake_RGBColor>(
    Snake_RGBColor_descriptor(), name, value);
}
enum FromClientToServer_TypesOfHit {
  FromClientToServer_TypesOfHit_NOTHING = 0,
  FromClientToServer_TypesOfHit_SNAKE = 1,
  FromClientToServer_TypesOfHit_STRAWBERRY = 2,
  FromClientToServer_TypesOfHit_WALL = 3
};
bool FromClientToServer_TypesOfHit_IsValid(int value);
const FromClientToServer_TypesOfHit FromClientToServer_TypesOfHit_TypesOfHit_MIN = FromClientToServer_TypesOfHit_NOTHING;
const FromClientToServer_TypesOfHit FromClientToServer_TypesOfHit_TypesOfHit_MAX = FromClientToServer_TypesOfHit_WALL;
const int FromClientToServer_TypesOfHit_TypesOfHit_ARRAYSIZE = FromClientToServer_TypesOfHit_TypesOfHit_MAX + 1;

const ::google::protobuf::EnumDescriptor* FromClientToServer_TypesOfHit_descriptor();
inline const ::std::string& FromClientToServer_TypesOfHit_Name(FromClientToServer_TypesOfHit value) {
  return ::google::protobuf::internal::NameOfEnum(
    FromClientToServer_TypesOfHit_descriptor(), value);
}
inline bool FromClientToServer_TypesOfHit_Parse(
    const ::std::string& name, FromClientToServer_TypesOfHit* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FromClientToServer_TypesOfHit>(
    FromClientToServer_TypesOfHit_descriptor(), name, value);
}
enum FirstMessageFromServerToClient_eYouAre {
  FirstMessageFromServerToClient_eYouAre_WAITING_IN_LOBBY = 0,
  FirstMessageFromServerToClient_eYouAre_WAITING_TO_FINISH_GAME = 1,
  FirstMessageFromServerToClient_eYouAre_START_GAME = 2,
  FirstMessageFromServerToClient_eYouAre_SERVER_FULL = 3
};
bool FirstMessageFromServerToClient_eYouAre_IsValid(int value);
const FirstMessageFromServerToClient_eYouAre FirstMessageFromServerToClient_eYouAre_eYouAre_MIN = FirstMessageFromServerToClient_eYouAre_WAITING_IN_LOBBY;
const FirstMessageFromServerToClient_eYouAre FirstMessageFromServerToClient_eYouAre_eYouAre_MAX = FirstMessageFromServerToClient_eYouAre_SERVER_FULL;
const int FirstMessageFromServerToClient_eYouAre_eYouAre_ARRAYSIZE = FirstMessageFromServerToClient_eYouAre_eYouAre_MAX + 1;

const ::google::protobuf::EnumDescriptor* FirstMessageFromServerToClient_eYouAre_descriptor();
inline const ::std::string& FirstMessageFromServerToClient_eYouAre_Name(FirstMessageFromServerToClient_eYouAre value) {
  return ::google::protobuf::internal::NameOfEnum(
    FirstMessageFromServerToClient_eYouAre_descriptor(), value);
}
inline bool FirstMessageFromServerToClient_eYouAre_Parse(
    const ::std::string& name, FirstMessageFromServerToClient_eYouAre* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FirstMessageFromServerToClient_eYouAre>(
    FirstMessageFromServerToClient_eYouAre_descriptor(), name, value);
}
// ===================================================================

class PositionSnakePart : public ::google::protobuf::Message {
 public:
  PositionSnakePart();
  virtual ~PositionSnakePart();

  PositionSnakePart(const PositionSnakePart& from);

  inline PositionSnakePart& operator=(const PositionSnakePart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PositionSnakePart& default_instance();

  void Swap(PositionSnakePart* other);

  // implements Message ----------------------------------------------

  PositionSnakePart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PositionSnakePart& from);
  void MergeFrom(const PositionSnakePart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 pos_x = 1;
  inline bool has_pos_x() const;
  inline void clear_pos_x();
  static const int kPosXFieldNumber = 1;
  inline ::google::protobuf::int32 pos_x() const;
  inline void set_pos_x(::google::protobuf::int32 value);

  // required int32 pos_y = 2;
  inline bool has_pos_y() const;
  inline void clear_pos_y();
  static const int kPosYFieldNumber = 2;
  inline ::google::protobuf::int32 pos_y() const;
  inline void set_pos_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:network.PositionSnakePart)
 private:
  inline void set_has_pos_x();
  inline void clear_has_pos_x();
  inline void set_has_pos_y();
  inline void clear_has_pos_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 pos_x_;
  ::google::protobuf::int32 pos_y_;
  friend void  protobuf_AddDesc_network_2eprotoc();
  friend void protobuf_AssignDesc_network_2eprotoc();
  friend void protobuf_ShutdownFile_network_2eprotoc();

  void InitAsDefaultInstance();
  static PositionSnakePart* default_instance_;
};
// -------------------------------------------------------------------

class StrawBerry : public ::google::protobuf::Message {
 public:
  StrawBerry();
  virtual ~StrawBerry();

  StrawBerry(const StrawBerry& from);

  inline StrawBerry& operator=(const StrawBerry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StrawBerry& default_instance();

  void Swap(StrawBerry* other);

  // implements Message ----------------------------------------------

  StrawBerry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StrawBerry& from);
  void MergeFrom(const StrawBerry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 pos_x = 1;
  inline bool has_pos_x() const;
  inline void clear_pos_x();
  static const int kPosXFieldNumber = 1;
  inline ::google::protobuf::int32 pos_x() const;
  inline void set_pos_x(::google::protobuf::int32 value);

  // required int32 pos_y = 2;
  inline bool has_pos_y() const;
  inline void clear_pos_y();
  static const int kPosYFieldNumber = 2;
  inline ::google::protobuf::int32 pos_y() const;
  inline void set_pos_y(::google::protobuf::int32 value);

  // required int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required bool life = 4;
  inline bool has_life() const;
  inline void clear_life();
  static const int kLifeFieldNumber = 4;
  inline bool life() const;
  inline void set_life(bool value);

  // @@protoc_insertion_point(class_scope:network.StrawBerry)
 private:
  inline void set_has_pos_x();
  inline void clear_has_pos_x();
  inline void set_has_pos_y();
  inline void clear_has_pos_y();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_life();
  inline void clear_has_life();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 pos_x_;
  ::google::protobuf::int32 pos_y_;
  ::google::protobuf::int32 id_;
  bool life_;
  friend void  protobuf_AddDesc_network_2eprotoc();
  friend void protobuf_AssignDesc_network_2eprotoc();
  friend void protobuf_ShutdownFile_network_2eprotoc();

  void InitAsDefaultInstance();
  static StrawBerry* default_instance_;
};
// -------------------------------------------------------------------

class Snake : public ::google::protobuf::Message {
 public:
  Snake();
  virtual ~Snake();

  Snake(const Snake& from);

  inline Snake& operator=(const Snake& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Snake& default_instance();

  void Swap(Snake* other);

  // implements Message ----------------------------------------------

  Snake* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Snake& from);
  void MergeFrom(const Snake& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Snake_RGBColor RGBColor;
  static const RGBColor RED = Snake_RGBColor_RED;
  static const RGBColor GREEN = Snake_RGBColor_GREEN;
  static const RGBColor BLUE = Snake_RGBColor_BLUE;
  static const RGBColor GREY = Snake_RGBColor_GREY;
  static const RGBColor YELLOW = Snake_RGBColor_YELLOW;
  static const RGBColor ORANGE = Snake_RGBColor_ORANGE;
  static const RGBColor VIOLET = Snake_RGBColor_VIOLET;
  static const RGBColor BROWN = Snake_RGBColor_BROWN;
  static inline bool RGBColor_IsValid(int value) {
    return Snake_RGBColor_IsValid(value);
  }
  static const RGBColor RGBColor_MIN =
    Snake_RGBColor_RGBColor_MIN;
  static const RGBColor RGBColor_MAX =
    Snake_RGBColor_RGBColor_MAX;
  static const int RGBColor_ARRAYSIZE =
    Snake_RGBColor_RGBColor_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RGBColor_descriptor() {
    return Snake_RGBColor_descriptor();
  }
  static inline const ::std::string& RGBColor_Name(RGBColor value) {
    return Snake_RGBColor_Name(value);
  }
  static inline bool RGBColor_Parse(const ::std::string& name,
      RGBColor* value) {
    return Snake_RGBColor_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated .network.PositionSnakePart positionsnakepart = 2;
  inline int positionsnakepart_size() const;
  inline void clear_positionsnakepart();
  static const int kPositionsnakepartFieldNumber = 2;
  inline const ::network::PositionSnakePart& positionsnakepart(int index) const;
  inline ::network::PositionSnakePart* mutable_positionsnakepart(int index);
  inline ::network::PositionSnakePart* add_positionsnakepart();
  inline const ::google::protobuf::RepeatedPtrField< ::network::PositionSnakePart >&
      positionsnakepart() const;
  inline ::google::protobuf::RepeatedPtrField< ::network::PositionSnakePart >*
      mutable_positionsnakepart();

  // required .network.Snake.RGBColor color = 3;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 3;
  inline ::network::Snake_RGBColor color() const;
  inline void set_color(::network::Snake_RGBColor value);

  // required bool life = 4;
  inline bool has_life() const;
  inline void clear_life();
  static const int kLifeFieldNumber = 4;
  inline bool life() const;
  inline void set_life(bool value);

  // @@protoc_insertion_point(class_scope:network.Snake)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_life();
  inline void clear_has_life();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::network::PositionSnakePart > positionsnakepart_;
  ::google::protobuf::int32 id_;
  int color_;
  bool life_;
  friend void  protobuf_AddDesc_network_2eprotoc();
  friend void protobuf_AssignDesc_network_2eprotoc();
  friend void protobuf_ShutdownFile_network_2eprotoc();

  void InitAsDefaultInstance();
  static Snake* default_instance_;
};
// -------------------------------------------------------------------

class FromServerToClient : public ::google::protobuf::Message {
 public:
  FromServerToClient();
  virtual ~FromServerToClient();

  FromServerToClient(const FromServerToClient& from);

  inline FromServerToClient& operator=(const FromServerToClient& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FromServerToClient& default_instance();

  void Swap(FromServerToClient* other);

  // implements Message ----------------------------------------------

  FromServerToClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FromServerToClient& from);
  void MergeFrom(const FromServerToClient& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool gameover = 1 [default = false];
  inline bool has_gameover() const;
  inline void clear_gameover();
  static const int kGameoverFieldNumber = 1;
  inline bool gameover() const;
  inline void set_gameover(bool value);

  // required bool youCanAddAPart = 2;
  inline bool has_youcanaddapart() const;
  inline void clear_youcanaddapart();
  static const int kYouCanAddAPartFieldNumber = 2;
  inline bool youcanaddapart() const;
  inline void set_youcanaddapart(bool value);

  // repeated .network.Snake snakes_game = 3;
  inline int snakes_game_size() const;
  inline void clear_snakes_game();
  static const int kSnakesGameFieldNumber = 3;
  inline const ::network::Snake& snakes_game(int index) const;
  inline ::network::Snake* mutable_snakes_game(int index);
  inline ::network::Snake* add_snakes_game();
  inline const ::google::protobuf::RepeatedPtrField< ::network::Snake >&
      snakes_game() const;
  inline ::google::protobuf::RepeatedPtrField< ::network::Snake >*
      mutable_snakes_game();

  // repeated .network.StrawBerry strawberry = 4;
  inline int strawberry_size() const;
  inline void clear_strawberry();
  static const int kStrawberryFieldNumber = 4;
  inline const ::network::StrawBerry& strawberry(int index) const;
  inline ::network::StrawBerry* mutable_strawberry(int index);
  inline ::network::StrawBerry* add_strawberry();
  inline const ::google::protobuf::RepeatedPtrField< ::network::StrawBerry >&
      strawberry() const;
  inline ::google::protobuf::RepeatedPtrField< ::network::StrawBerry >*
      mutable_strawberry();

  // @@protoc_insertion_point(class_scope:network.FromServerToClient)
 private:
  inline void set_has_gameover();
  inline void clear_has_gameover();
  inline void set_has_youcanaddapart();
  inline void clear_has_youcanaddapart();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::network::Snake > snakes_game_;
  ::google::protobuf::RepeatedPtrField< ::network::StrawBerry > strawberry_;
  bool gameover_;
  bool youcanaddapart_;
  friend void  protobuf_AddDesc_network_2eprotoc();
  friend void protobuf_AssignDesc_network_2eprotoc();
  friend void protobuf_ShutdownFile_network_2eprotoc();

  void InitAsDefaultInstance();
  static FromServerToClient* default_instance_;
};
// -------------------------------------------------------------------

class FromClientToServer : public ::google::protobuf::Message {
 public:
  FromClientToServer();
  virtual ~FromClientToServer();

  FromClientToServer(const FromClientToServer& from);

  inline FromClientToServer& operator=(const FromClientToServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FromClientToServer& default_instance();

  void Swap(FromClientToServer* other);

  // implements Message ----------------------------------------------

  FromClientToServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FromClientToServer& from);
  void MergeFrom(const FromClientToServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FromClientToServer_TypesOfHit TypesOfHit;
  static const TypesOfHit NOTHING = FromClientToServer_TypesOfHit_NOTHING;
  static const TypesOfHit SNAKE = FromClientToServer_TypesOfHit_SNAKE;
  static const TypesOfHit STRAWBERRY = FromClientToServer_TypesOfHit_STRAWBERRY;
  static const TypesOfHit WALL = FromClientToServer_TypesOfHit_WALL;
  static inline bool TypesOfHit_IsValid(int value) {
    return FromClientToServer_TypesOfHit_IsValid(value);
  }
  static const TypesOfHit TypesOfHit_MIN =
    FromClientToServer_TypesOfHit_TypesOfHit_MIN;
  static const TypesOfHit TypesOfHit_MAX =
    FromClientToServer_TypesOfHit_TypesOfHit_MAX;
  static const int TypesOfHit_ARRAYSIZE =
    FromClientToServer_TypesOfHit_TypesOfHit_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TypesOfHit_descriptor() {
    return FromClientToServer_TypesOfHit_descriptor();
  }
  static inline const ::std::string& TypesOfHit_Name(TypesOfHit value) {
    return FromClientToServer_TypesOfHit_Name(value);
  }
  static inline bool TypesOfHit_Parse(const ::std::string& name,
      TypesOfHit* value) {
    return FromClientToServer_TypesOfHit_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .network.Snake snakeclient = 1;
  inline bool has_snakeclient() const;
  inline void clear_snakeclient();
  static const int kSnakeclientFieldNumber = 1;
  inline const ::network::Snake& snakeclient() const;
  inline ::network::Snake* mutable_snakeclient();
  inline ::network::Snake* release_snakeclient();
  inline void set_allocated_snakeclient(::network::Snake* snakeclient);

  // required .network.FromClientToServer.TypesOfHit hitwith = 2;
  inline bool has_hitwith() const;
  inline void clear_hitwith();
  static const int kHitwithFieldNumber = 2;
  inline ::network::FromClientToServer_TypesOfHit hitwith() const;
  inline void set_hitwith(::network::FromClientToServer_TypesOfHit value);

  // @@protoc_insertion_point(class_scope:network.FromClientToServer)
 private:
  inline void set_has_snakeclient();
  inline void clear_has_snakeclient();
  inline void set_has_hitwith();
  inline void clear_has_hitwith();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::network::Snake* snakeclient_;
  int hitwith_;
  friend void  protobuf_AddDesc_network_2eprotoc();
  friend void protobuf_AssignDesc_network_2eprotoc();
  friend void protobuf_ShutdownFile_network_2eprotoc();

  void InitAsDefaultInstance();
  static FromClientToServer* default_instance_;
};
// -------------------------------------------------------------------

class FirstMessageFromServerToClient : public ::google::protobuf::Message {
 public:
  FirstMessageFromServerToClient();
  virtual ~FirstMessageFromServerToClient();

  FirstMessageFromServerToClient(const FirstMessageFromServerToClient& from);

  inline FirstMessageFromServerToClient& operator=(const FirstMessageFromServerToClient& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FirstMessageFromServerToClient& default_instance();

  void Swap(FirstMessageFromServerToClient* other);

  // implements Message ----------------------------------------------

  FirstMessageFromServerToClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FirstMessageFromServerToClient& from);
  void MergeFrom(const FirstMessageFromServerToClient& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FirstMessageFromServerToClient_eYouAre eYouAre;
  static const eYouAre WAITING_IN_LOBBY = FirstMessageFromServerToClient_eYouAre_WAITING_IN_LOBBY;
  static const eYouAre WAITING_TO_FINISH_GAME = FirstMessageFromServerToClient_eYouAre_WAITING_TO_FINISH_GAME;
  static const eYouAre START_GAME = FirstMessageFromServerToClient_eYouAre_START_GAME;
  static const eYouAre SERVER_FULL = FirstMessageFromServerToClient_eYouAre_SERVER_FULL;
  static inline bool eYouAre_IsValid(int value) {
    return FirstMessageFromServerToClient_eYouAre_IsValid(value);
  }
  static const eYouAre eYouAre_MIN =
    FirstMessageFromServerToClient_eYouAre_eYouAre_MIN;
  static const eYouAre eYouAre_MAX =
    FirstMessageFromServerToClient_eYouAre_eYouAre_MAX;
  static const int eYouAre_ARRAYSIZE =
    FirstMessageFromServerToClient_eYouAre_eYouAre_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eYouAre_descriptor() {
    return FirstMessageFromServerToClient_eYouAre_descriptor();
  }
  static inline const ::std::string& eYouAre_Name(eYouAre value) {
    return FirstMessageFromServerToClient_eYouAre_Name(value);
  }
  static inline bool eYouAre_Parse(const ::std::string& name,
      eYouAre* value) {
    return FirstMessageFromServerToClient_eYouAre_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .network.PositionSnakePart walls = 1;
  inline bool has_walls() const;
  inline void clear_walls();
  static const int kWallsFieldNumber = 1;
  inline const ::network::PositionSnakePart& walls() const;
  inline ::network::PositionSnakePart* mutable_walls();
  inline ::network::PositionSnakePart* release_walls();
  inline void set_allocated_walls(::network::PositionSnakePart* walls);

  // optional .network.Snake.RGBColor color = 2;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 2;
  inline ::network::Snake_RGBColor color() const;
  inline void set_color(::network::Snake_RGBColor value);

  // optional int32 idtogive = 3;
  inline bool has_idtogive() const;
  inline void clear_idtogive();
  static const int kIdtogiveFieldNumber = 3;
  inline ::google::protobuf::int32 idtogive() const;
  inline void set_idtogive(::google::protobuf::int32 value);

  // required .network.FirstMessageFromServerToClient.eYouAre you_are = 4;
  inline bool has_you_are() const;
  inline void clear_you_are();
  static const int kYouAreFieldNumber = 4;
  inline ::network::FirstMessageFromServerToClient_eYouAre you_are() const;
  inline void set_you_are(::network::FirstMessageFromServerToClient_eYouAre value);

  // @@protoc_insertion_point(class_scope:network.FirstMessageFromServerToClient)
 private:
  inline void set_has_walls();
  inline void clear_has_walls();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_idtogive();
  inline void clear_has_idtogive();
  inline void set_has_you_are();
  inline void clear_has_you_are();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::network::PositionSnakePart* walls_;
  int color_;
  ::google::protobuf::int32 idtogive_;
  int you_are_;
  friend void  protobuf_AddDesc_network_2eprotoc();
  friend void protobuf_AssignDesc_network_2eprotoc();
  friend void protobuf_ShutdownFile_network_2eprotoc();

  void InitAsDefaultInstance();
  static FirstMessageFromServerToClient* default_instance_;
};
// ===================================================================


// ===================================================================

// PositionSnakePart

// required int32 pos_x = 1;
inline bool PositionSnakePart::has_pos_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PositionSnakePart::set_has_pos_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PositionSnakePart::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PositionSnakePart::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline ::google::protobuf::int32 PositionSnakePart::pos_x() const {
  // @@protoc_insertion_point(field_get:network.PositionSnakePart.pos_x)
  return pos_x_;
}
inline void PositionSnakePart::set_pos_x(::google::protobuf::int32 value) {
  set_has_pos_x();
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:network.PositionSnakePart.pos_x)
}

// required int32 pos_y = 2;
inline bool PositionSnakePart::has_pos_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PositionSnakePart::set_has_pos_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PositionSnakePart::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PositionSnakePart::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline ::google::protobuf::int32 PositionSnakePart::pos_y() const {
  // @@protoc_insertion_point(field_get:network.PositionSnakePart.pos_y)
  return pos_y_;
}
inline void PositionSnakePart::set_pos_y(::google::protobuf::int32 value) {
  set_has_pos_y();
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:network.PositionSnakePart.pos_y)
}

// -------------------------------------------------------------------

// StrawBerry

// required int32 pos_x = 1;
inline bool StrawBerry::has_pos_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StrawBerry::set_has_pos_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StrawBerry::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StrawBerry::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
inline ::google::protobuf::int32 StrawBerry::pos_x() const {
  // @@protoc_insertion_point(field_get:network.StrawBerry.pos_x)
  return pos_x_;
}
inline void StrawBerry::set_pos_x(::google::protobuf::int32 value) {
  set_has_pos_x();
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:network.StrawBerry.pos_x)
}

// required int32 pos_y = 2;
inline bool StrawBerry::has_pos_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StrawBerry::set_has_pos_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StrawBerry::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StrawBerry::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
inline ::google::protobuf::int32 StrawBerry::pos_y() const {
  // @@protoc_insertion_point(field_get:network.StrawBerry.pos_y)
  return pos_y_;
}
inline void StrawBerry::set_pos_y(::google::protobuf::int32 value) {
  set_has_pos_y();
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:network.StrawBerry.pos_y)
}

// required int32 id = 3;
inline bool StrawBerry::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StrawBerry::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StrawBerry::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StrawBerry::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 StrawBerry::id() const {
  // @@protoc_insertion_point(field_get:network.StrawBerry.id)
  return id_;
}
inline void StrawBerry::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:network.StrawBerry.id)
}

// required bool life = 4;
inline bool StrawBerry::has_life() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StrawBerry::set_has_life() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StrawBerry::clear_has_life() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StrawBerry::clear_life() {
  life_ = false;
  clear_has_life();
}
inline bool StrawBerry::life() const {
  // @@protoc_insertion_point(field_get:network.StrawBerry.life)
  return life_;
}
inline void StrawBerry::set_life(bool value) {
  set_has_life();
  life_ = value;
  // @@protoc_insertion_point(field_set:network.StrawBerry.life)
}

// -------------------------------------------------------------------

// Snake

// required int32 id = 1;
inline bool Snake::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Snake::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Snake::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Snake::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Snake::id() const {
  // @@protoc_insertion_point(field_get:network.Snake.id)
  return id_;
}
inline void Snake::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:network.Snake.id)
}

// repeated .network.PositionSnakePart positionsnakepart = 2;
inline int Snake::positionsnakepart_size() const {
  return positionsnakepart_.size();
}
inline void Snake::clear_positionsnakepart() {
  positionsnakepart_.Clear();
}
inline const ::network::PositionSnakePart& Snake::positionsnakepart(int index) const {
  // @@protoc_insertion_point(field_get:network.Snake.positionsnakepart)
  return positionsnakepart_.Get(index);
}
inline ::network::PositionSnakePart* Snake::mutable_positionsnakepart(int index) {
  // @@protoc_insertion_point(field_mutable:network.Snake.positionsnakepart)
  return positionsnakepart_.Mutable(index);
}
inline ::network::PositionSnakePart* Snake::add_positionsnakepart() {
  // @@protoc_insertion_point(field_add:network.Snake.positionsnakepart)
  return positionsnakepart_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::network::PositionSnakePart >&
Snake::positionsnakepart() const {
  // @@protoc_insertion_point(field_list:network.Snake.positionsnakepart)
  return positionsnakepart_;
}
inline ::google::protobuf::RepeatedPtrField< ::network::PositionSnakePart >*
Snake::mutable_positionsnakepart() {
  // @@protoc_insertion_point(field_mutable_list:network.Snake.positionsnakepart)
  return &positionsnakepart_;
}

// required .network.Snake.RGBColor color = 3;
inline bool Snake::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Snake::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Snake::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Snake::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::network::Snake_RGBColor Snake::color() const {
  // @@protoc_insertion_point(field_get:network.Snake.color)
  return static_cast< ::network::Snake_RGBColor >(color_);
}
inline void Snake::set_color(::network::Snake_RGBColor value) {
  assert(::network::Snake_RGBColor_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:network.Snake.color)
}

// required bool life = 4;
inline bool Snake::has_life() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Snake::set_has_life() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Snake::clear_has_life() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Snake::clear_life() {
  life_ = false;
  clear_has_life();
}
inline bool Snake::life() const {
  // @@protoc_insertion_point(field_get:network.Snake.life)
  return life_;
}
inline void Snake::set_life(bool value) {
  set_has_life();
  life_ = value;
  // @@protoc_insertion_point(field_set:network.Snake.life)
}

// -------------------------------------------------------------------

// FromServerToClient

// required bool gameover = 1 [default = false];
inline bool FromServerToClient::has_gameover() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FromServerToClient::set_has_gameover() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FromServerToClient::clear_has_gameover() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FromServerToClient::clear_gameover() {
  gameover_ = false;
  clear_has_gameover();
}
inline bool FromServerToClient::gameover() const {
  // @@protoc_insertion_point(field_get:network.FromServerToClient.gameover)
  return gameover_;
}
inline void FromServerToClient::set_gameover(bool value) {
  set_has_gameover();
  gameover_ = value;
  // @@protoc_insertion_point(field_set:network.FromServerToClient.gameover)
}

// required bool youCanAddAPart = 2;
inline bool FromServerToClient::has_youcanaddapart() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FromServerToClient::set_has_youcanaddapart() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FromServerToClient::clear_has_youcanaddapart() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FromServerToClient::clear_youcanaddapart() {
  youcanaddapart_ = false;
  clear_has_youcanaddapart();
}
inline bool FromServerToClient::youcanaddapart() const {
  // @@protoc_insertion_point(field_get:network.FromServerToClient.youCanAddAPart)
  return youcanaddapart_;
}
inline void FromServerToClient::set_youcanaddapart(bool value) {
  set_has_youcanaddapart();
  youcanaddapart_ = value;
  // @@protoc_insertion_point(field_set:network.FromServerToClient.youCanAddAPart)
}

// repeated .network.Snake snakes_game = 3;
inline int FromServerToClient::snakes_game_size() const {
  return snakes_game_.size();
}
inline void FromServerToClient::clear_snakes_game() {
  snakes_game_.Clear();
}
inline const ::network::Snake& FromServerToClient::snakes_game(int index) const {
  // @@protoc_insertion_point(field_get:network.FromServerToClient.snakes_game)
  return snakes_game_.Get(index);
}
inline ::network::Snake* FromServerToClient::mutable_snakes_game(int index) {
  // @@protoc_insertion_point(field_mutable:network.FromServerToClient.snakes_game)
  return snakes_game_.Mutable(index);
}
inline ::network::Snake* FromServerToClient::add_snakes_game() {
  // @@protoc_insertion_point(field_add:network.FromServerToClient.snakes_game)
  return snakes_game_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::network::Snake >&
FromServerToClient::snakes_game() const {
  // @@protoc_insertion_point(field_list:network.FromServerToClient.snakes_game)
  return snakes_game_;
}
inline ::google::protobuf::RepeatedPtrField< ::network::Snake >*
FromServerToClient::mutable_snakes_game() {
  // @@protoc_insertion_point(field_mutable_list:network.FromServerToClient.snakes_game)
  return &snakes_game_;
}

// repeated .network.StrawBerry strawberry = 4;
inline int FromServerToClient::strawberry_size() const {
  return strawberry_.size();
}
inline void FromServerToClient::clear_strawberry() {
  strawberry_.Clear();
}
inline const ::network::StrawBerry& FromServerToClient::strawberry(int index) const {
  // @@protoc_insertion_point(field_get:network.FromServerToClient.strawberry)
  return strawberry_.Get(index);
}
inline ::network::StrawBerry* FromServerToClient::mutable_strawberry(int index) {
  // @@protoc_insertion_point(field_mutable:network.FromServerToClient.strawberry)
  return strawberry_.Mutable(index);
}
inline ::network::StrawBerry* FromServerToClient::add_strawberry() {
  // @@protoc_insertion_point(field_add:network.FromServerToClient.strawberry)
  return strawberry_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::network::StrawBerry >&
FromServerToClient::strawberry() const {
  // @@protoc_insertion_point(field_list:network.FromServerToClient.strawberry)
  return strawberry_;
}
inline ::google::protobuf::RepeatedPtrField< ::network::StrawBerry >*
FromServerToClient::mutable_strawberry() {
  // @@protoc_insertion_point(field_mutable_list:network.FromServerToClient.strawberry)
  return &strawberry_;
}

// -------------------------------------------------------------------

// FromClientToServer

// required .network.Snake snakeclient = 1;
inline bool FromClientToServer::has_snakeclient() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FromClientToServer::set_has_snakeclient() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FromClientToServer::clear_has_snakeclient() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FromClientToServer::clear_snakeclient() {
  if (snakeclient_ != NULL) snakeclient_->::network::Snake::Clear();
  clear_has_snakeclient();
}
inline const ::network::Snake& FromClientToServer::snakeclient() const {
  // @@protoc_insertion_point(field_get:network.FromClientToServer.snakeclient)
  return snakeclient_ != NULL ? *snakeclient_ : *default_instance_->snakeclient_;
}
inline ::network::Snake* FromClientToServer::mutable_snakeclient() {
  set_has_snakeclient();
  if (snakeclient_ == NULL) snakeclient_ = new ::network::Snake;
  // @@protoc_insertion_point(field_mutable:network.FromClientToServer.snakeclient)
  return snakeclient_;
}
inline ::network::Snake* FromClientToServer::release_snakeclient() {
  clear_has_snakeclient();
  ::network::Snake* temp = snakeclient_;
  snakeclient_ = NULL;
  return temp;
}
inline void FromClientToServer::set_allocated_snakeclient(::network::Snake* snakeclient) {
  delete snakeclient_;
  snakeclient_ = snakeclient;
  if (snakeclient) {
    set_has_snakeclient();
  } else {
    clear_has_snakeclient();
  }
  // @@protoc_insertion_point(field_set_allocated:network.FromClientToServer.snakeclient)
}

// required .network.FromClientToServer.TypesOfHit hitwith = 2;
inline bool FromClientToServer::has_hitwith() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FromClientToServer::set_has_hitwith() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FromClientToServer::clear_has_hitwith() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FromClientToServer::clear_hitwith() {
  hitwith_ = 0;
  clear_has_hitwith();
}
inline ::network::FromClientToServer_TypesOfHit FromClientToServer::hitwith() const {
  // @@protoc_insertion_point(field_get:network.FromClientToServer.hitwith)
  return static_cast< ::network::FromClientToServer_TypesOfHit >(hitwith_);
}
inline void FromClientToServer::set_hitwith(::network::FromClientToServer_TypesOfHit value) {
  assert(::network::FromClientToServer_TypesOfHit_IsValid(value));
  set_has_hitwith();
  hitwith_ = value;
  // @@protoc_insertion_point(field_set:network.FromClientToServer.hitwith)
}

// -------------------------------------------------------------------

// FirstMessageFromServerToClient

// optional .network.PositionSnakePart walls = 1;
inline bool FirstMessageFromServerToClient::has_walls() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FirstMessageFromServerToClient::set_has_walls() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FirstMessageFromServerToClient::clear_has_walls() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FirstMessageFromServerToClient::clear_walls() {
  if (walls_ != NULL) walls_->::network::PositionSnakePart::Clear();
  clear_has_walls();
}
inline const ::network::PositionSnakePart& FirstMessageFromServerToClient::walls() const {
  // @@protoc_insertion_point(field_get:network.FirstMessageFromServerToClient.walls)
  return walls_ != NULL ? *walls_ : *default_instance_->walls_;
}
inline ::network::PositionSnakePart* FirstMessageFromServerToClient::mutable_walls() {
  set_has_walls();
  if (walls_ == NULL) walls_ = new ::network::PositionSnakePart;
  // @@protoc_insertion_point(field_mutable:network.FirstMessageFromServerToClient.walls)
  return walls_;
}
inline ::network::PositionSnakePart* FirstMessageFromServerToClient::release_walls() {
  clear_has_walls();
  ::network::PositionSnakePart* temp = walls_;
  walls_ = NULL;
  return temp;
}
inline void FirstMessageFromServerToClient::set_allocated_walls(::network::PositionSnakePart* walls) {
  delete walls_;
  walls_ = walls;
  if (walls) {
    set_has_walls();
  } else {
    clear_has_walls();
  }
  // @@protoc_insertion_point(field_set_allocated:network.FirstMessageFromServerToClient.walls)
}

// optional .network.Snake.RGBColor color = 2;
inline bool FirstMessageFromServerToClient::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FirstMessageFromServerToClient::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FirstMessageFromServerToClient::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FirstMessageFromServerToClient::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::network::Snake_RGBColor FirstMessageFromServerToClient::color() const {
  // @@protoc_insertion_point(field_get:network.FirstMessageFromServerToClient.color)
  return static_cast< ::network::Snake_RGBColor >(color_);
}
inline void FirstMessageFromServerToClient::set_color(::network::Snake_RGBColor value) {
  assert(::network::Snake_RGBColor_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:network.FirstMessageFromServerToClient.color)
}

// optional int32 idtogive = 3;
inline bool FirstMessageFromServerToClient::has_idtogive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FirstMessageFromServerToClient::set_has_idtogive() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FirstMessageFromServerToClient::clear_has_idtogive() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FirstMessageFromServerToClient::clear_idtogive() {
  idtogive_ = 0;
  clear_has_idtogive();
}
inline ::google::protobuf::int32 FirstMessageFromServerToClient::idtogive() const {
  // @@protoc_insertion_point(field_get:network.FirstMessageFromServerToClient.idtogive)
  return idtogive_;
}
inline void FirstMessageFromServerToClient::set_idtogive(::google::protobuf::int32 value) {
  set_has_idtogive();
  idtogive_ = value;
  // @@protoc_insertion_point(field_set:network.FirstMessageFromServerToClient.idtogive)
}

// required .network.FirstMessageFromServerToClient.eYouAre you_are = 4;
inline bool FirstMessageFromServerToClient::has_you_are() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FirstMessageFromServerToClient::set_has_you_are() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FirstMessageFromServerToClient::clear_has_you_are() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FirstMessageFromServerToClient::clear_you_are() {
  you_are_ = 0;
  clear_has_you_are();
}
inline ::network::FirstMessageFromServerToClient_eYouAre FirstMessageFromServerToClient::you_are() const {
  // @@protoc_insertion_point(field_get:network.FirstMessageFromServerToClient.you_are)
  return static_cast< ::network::FirstMessageFromServerToClient_eYouAre >(you_are_);
}
inline void FirstMessageFromServerToClient::set_you_are(::network::FirstMessageFromServerToClient_eYouAre value) {
  assert(::network::FirstMessageFromServerToClient_eYouAre_IsValid(value));
  set_has_you_are();
  you_are_ = value;
  // @@protoc_insertion_point(field_set:network.FirstMessageFromServerToClient.you_are)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace network

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::network::Snake_RGBColor> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network::Snake_RGBColor>() {
  return ::network::Snake_RGBColor_descriptor();
}
template <> struct is_proto_enum< ::network::FromClientToServer_TypesOfHit> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network::FromClientToServer_TypesOfHit>() {
  return ::network::FromClientToServer_TypesOfHit_descriptor();
}
template <> struct is_proto_enum< ::network::FirstMessageFromServerToClient_eYouAre> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network::FirstMessageFromServerToClient_eYouAre>() {
  return ::network::FirstMessageFromServerToClient_eYouAre_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_network_2eprotoc__INCLUDED
