// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network.protoc

#ifndef GOOGLE_PROTOBUF_INCLUDED_network_2eprotoc
#define GOOGLE_PROTOBUF_INCLUDED_network_2eprotoc

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_network_2eprotoc
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_network_2eprotoc {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_network_2eprotoc;
namespace network {
class FirstMessageFromServerToClient;
class FirstMessageFromServerToClientDefaultTypeInternal;
extern FirstMessageFromServerToClientDefaultTypeInternal _FirstMessageFromServerToClient_default_instance_;
class FromClientToServer;
class FromClientToServerDefaultTypeInternal;
extern FromClientToServerDefaultTypeInternal _FromClientToServer_default_instance_;
class FromServerToClient;
class FromServerToClientDefaultTypeInternal;
extern FromServerToClientDefaultTypeInternal _FromServerToClient_default_instance_;
class PositionSnakePart;
class PositionSnakePartDefaultTypeInternal;
extern PositionSnakePartDefaultTypeInternal _PositionSnakePart_default_instance_;
class Snake;
class SnakeDefaultTypeInternal;
extern SnakeDefaultTypeInternal _Snake_default_instance_;
class StrawBerry;
class StrawBerryDefaultTypeInternal;
extern StrawBerryDefaultTypeInternal _StrawBerry_default_instance_;
}  // namespace network
PROTOBUF_NAMESPACE_OPEN
template<> ::network::FirstMessageFromServerToClient* Arena::CreateMaybeMessage<::network::FirstMessageFromServerToClient>(Arena*);
template<> ::network::FromClientToServer* Arena::CreateMaybeMessage<::network::FromClientToServer>(Arena*);
template<> ::network::FromServerToClient* Arena::CreateMaybeMessage<::network::FromServerToClient>(Arena*);
template<> ::network::PositionSnakePart* Arena::CreateMaybeMessage<::network::PositionSnakePart>(Arena*);
template<> ::network::Snake* Arena::CreateMaybeMessage<::network::Snake>(Arena*);
template<> ::network::StrawBerry* Arena::CreateMaybeMessage<::network::StrawBerry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace network {

enum Snake_RGBColor : int {
  Snake_RGBColor_RED = 0,
  Snake_RGBColor_GREEN = 1,
  Snake_RGBColor_BLUE = 2,
  Snake_RGBColor_GREY = 3,
  Snake_RGBColor_YELLOW = 4,
  Snake_RGBColor_ORANGE = 5,
  Snake_RGBColor_VIOLET = 6,
  Snake_RGBColor_BROWN = 7
};
bool Snake_RGBColor_IsValid(int value);
constexpr Snake_RGBColor Snake_RGBColor_RGBColor_MIN = Snake_RGBColor_RED;
constexpr Snake_RGBColor Snake_RGBColor_RGBColor_MAX = Snake_RGBColor_BROWN;
constexpr int Snake_RGBColor_RGBColor_ARRAYSIZE = Snake_RGBColor_RGBColor_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Snake_RGBColor_descriptor();
template<typename T>
inline const std::string& Snake_RGBColor_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Snake_RGBColor>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Snake_RGBColor_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Snake_RGBColor_descriptor(), enum_t_value);
}
inline bool Snake_RGBColor_Parse(
    const std::string& name, Snake_RGBColor* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Snake_RGBColor>(
    Snake_RGBColor_descriptor(), name, value);
}
enum FromClientToServer_TypesOfHit : int {
  FromClientToServer_TypesOfHit_NOTHING = 0,
  FromClientToServer_TypesOfHit_SNAKE = 1,
  FromClientToServer_TypesOfHit_STRAWBERRY = 2,
  FromClientToServer_TypesOfHit_WALL = 3
};
bool FromClientToServer_TypesOfHit_IsValid(int value);
constexpr FromClientToServer_TypesOfHit FromClientToServer_TypesOfHit_TypesOfHit_MIN = FromClientToServer_TypesOfHit_NOTHING;
constexpr FromClientToServer_TypesOfHit FromClientToServer_TypesOfHit_TypesOfHit_MAX = FromClientToServer_TypesOfHit_WALL;
constexpr int FromClientToServer_TypesOfHit_TypesOfHit_ARRAYSIZE = FromClientToServer_TypesOfHit_TypesOfHit_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FromClientToServer_TypesOfHit_descriptor();
template<typename T>
inline const std::string& FromClientToServer_TypesOfHit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FromClientToServer_TypesOfHit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FromClientToServer_TypesOfHit_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FromClientToServer_TypesOfHit_descriptor(), enum_t_value);
}
inline bool FromClientToServer_TypesOfHit_Parse(
    const std::string& name, FromClientToServer_TypesOfHit* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FromClientToServer_TypesOfHit>(
    FromClientToServer_TypesOfHit_descriptor(), name, value);
}
enum FirstMessageFromServerToClient_eYouAre : int {
  FirstMessageFromServerToClient_eYouAre_WAITING_IN_LOBBY = 0,
  FirstMessageFromServerToClient_eYouAre_WAITING_TO_FINISH_GAME = 1,
  FirstMessageFromServerToClient_eYouAre_START_GAME = 2,
  FirstMessageFromServerToClient_eYouAre_SERVER_FULL = 3
};
bool FirstMessageFromServerToClient_eYouAre_IsValid(int value);
constexpr FirstMessageFromServerToClient_eYouAre FirstMessageFromServerToClient_eYouAre_eYouAre_MIN = FirstMessageFromServerToClient_eYouAre_WAITING_IN_LOBBY;
constexpr FirstMessageFromServerToClient_eYouAre FirstMessageFromServerToClient_eYouAre_eYouAre_MAX = FirstMessageFromServerToClient_eYouAre_SERVER_FULL;
constexpr int FirstMessageFromServerToClient_eYouAre_eYouAre_ARRAYSIZE = FirstMessageFromServerToClient_eYouAre_eYouAre_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FirstMessageFromServerToClient_eYouAre_descriptor();
template<typename T>
inline const std::string& FirstMessageFromServerToClient_eYouAre_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FirstMessageFromServerToClient_eYouAre>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FirstMessageFromServerToClient_eYouAre_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FirstMessageFromServerToClient_eYouAre_descriptor(), enum_t_value);
}
inline bool FirstMessageFromServerToClient_eYouAre_Parse(
    const std::string& name, FirstMessageFromServerToClient_eYouAre* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FirstMessageFromServerToClient_eYouAre>(
    FirstMessageFromServerToClient_eYouAre_descriptor(), name, value);
}
// ===================================================================

class PositionSnakePart :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.PositionSnakePart) */ {
 public:
  PositionSnakePart();
  virtual ~PositionSnakePart();

  PositionSnakePart(const PositionSnakePart& from);
  PositionSnakePart(PositionSnakePart&& from) noexcept
    : PositionSnakePart() {
    *this = ::std::move(from);
  }

  inline PositionSnakePart& operator=(const PositionSnakePart& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionSnakePart& operator=(PositionSnakePart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionSnakePart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionSnakePart* internal_default_instance() {
    return reinterpret_cast<const PositionSnakePart*>(
               &_PositionSnakePart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PositionSnakePart& a, PositionSnakePart& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionSnakePart* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionSnakePart* New() const final {
    return CreateMaybeMessage<PositionSnakePart>(nullptr);
  }

  PositionSnakePart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionSnakePart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionSnakePart& from);
  void MergeFrom(const PositionSnakePart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionSnakePart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.PositionSnakePart";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eprotoc);
    return ::descriptor_table_network_2eprotoc.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
  };
  // required int32 pos_x = 1;
  bool has_pos_x() const;
  private:
  bool _internal_has_pos_x() const;
  public:
  void clear_pos_x();
  ::PROTOBUF_NAMESPACE_ID::int32 pos_x() const;
  void set_pos_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pos_x() const;
  void _internal_set_pos_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 pos_y = 2;
  bool has_pos_y() const;
  private:
  bool _internal_has_pos_y() const;
  public:
  void clear_pos_y();
  ::PROTOBUF_NAMESPACE_ID::int32 pos_y() const;
  void set_pos_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pos_y() const;
  void _internal_set_pos_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:network.PositionSnakePart)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 pos_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 pos_y_;
  friend struct ::TableStruct_network_2eprotoc;
};
// -------------------------------------------------------------------

class StrawBerry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.StrawBerry) */ {
 public:
  StrawBerry();
  virtual ~StrawBerry();

  StrawBerry(const StrawBerry& from);
  StrawBerry(StrawBerry&& from) noexcept
    : StrawBerry() {
    *this = ::std::move(from);
  }

  inline StrawBerry& operator=(const StrawBerry& from) {
    CopyFrom(from);
    return *this;
  }
  inline StrawBerry& operator=(StrawBerry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StrawBerry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StrawBerry* internal_default_instance() {
    return reinterpret_cast<const StrawBerry*>(
               &_StrawBerry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StrawBerry& a, StrawBerry& b) {
    a.Swap(&b);
  }
  inline void Swap(StrawBerry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StrawBerry* New() const final {
    return CreateMaybeMessage<StrawBerry>(nullptr);
  }

  StrawBerry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StrawBerry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StrawBerry& from);
  void MergeFrom(const StrawBerry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StrawBerry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.StrawBerry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eprotoc);
    return ::descriptor_table_network_2eprotoc.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
    kIdFieldNumber = 3,
    kLifeFieldNumber = 4,
  };
  // required int32 pos_x = 1;
  bool has_pos_x() const;
  private:
  bool _internal_has_pos_x() const;
  public:
  void clear_pos_x();
  ::PROTOBUF_NAMESPACE_ID::int32 pos_x() const;
  void set_pos_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pos_x() const;
  void _internal_set_pos_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 pos_y = 2;
  bool has_pos_y() const;
  private:
  bool _internal_has_pos_y() const;
  public:
  void clear_pos_y();
  ::PROTOBUF_NAMESPACE_ID::int32 pos_y() const;
  void set_pos_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pos_y() const;
  void _internal_set_pos_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool life = 4;
  bool has_life() const;
  private:
  bool _internal_has_life() const;
  public:
  void clear_life();
  bool life() const;
  void set_life(bool value);
  private:
  bool _internal_life() const;
  void _internal_set_life(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.StrawBerry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 pos_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 pos_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  bool life_;
  friend struct ::TableStruct_network_2eprotoc;
};
// -------------------------------------------------------------------

class Snake :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.Snake) */ {
 public:
  Snake();
  virtual ~Snake();

  Snake(const Snake& from);
  Snake(Snake&& from) noexcept
    : Snake() {
    *this = ::std::move(from);
  }

  inline Snake& operator=(const Snake& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snake& operator=(Snake&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Snake& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Snake* internal_default_instance() {
    return reinterpret_cast<const Snake*>(
               &_Snake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Snake& a, Snake& b) {
    a.Swap(&b);
  }
  inline void Swap(Snake* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Snake* New() const final {
    return CreateMaybeMessage<Snake>(nullptr);
  }

  Snake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Snake>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Snake& from);
  void MergeFrom(const Snake& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.Snake";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eprotoc);
    return ::descriptor_table_network_2eprotoc.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Snake_RGBColor RGBColor;
  static constexpr RGBColor RED =
    Snake_RGBColor_RED;
  static constexpr RGBColor GREEN =
    Snake_RGBColor_GREEN;
  static constexpr RGBColor BLUE =
    Snake_RGBColor_BLUE;
  static constexpr RGBColor GREY =
    Snake_RGBColor_GREY;
  static constexpr RGBColor YELLOW =
    Snake_RGBColor_YELLOW;
  static constexpr RGBColor ORANGE =
    Snake_RGBColor_ORANGE;
  static constexpr RGBColor VIOLET =
    Snake_RGBColor_VIOLET;
  static constexpr RGBColor BROWN =
    Snake_RGBColor_BROWN;
  static inline bool RGBColor_IsValid(int value) {
    return Snake_RGBColor_IsValid(value);
  }
  static constexpr RGBColor RGBColor_MIN =
    Snake_RGBColor_RGBColor_MIN;
  static constexpr RGBColor RGBColor_MAX =
    Snake_RGBColor_RGBColor_MAX;
  static constexpr int RGBColor_ARRAYSIZE =
    Snake_RGBColor_RGBColor_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RGBColor_descriptor() {
    return Snake_RGBColor_descriptor();
  }
  template<typename T>
  static inline const std::string& RGBColor_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RGBColor>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RGBColor_Name.");
    return Snake_RGBColor_Name(enum_t_value);
  }
  static inline bool RGBColor_Parse(const std::string& name,
      RGBColor* value) {
    return Snake_RGBColor_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPositionsnakepartFieldNumber = 2,
    kIdFieldNumber = 1,
    kColorFieldNumber = 3,
    kLifeFieldNumber = 4,
  };
  // repeated .network.PositionSnakePart positionsnakepart = 2;
  int positionsnakepart_size() const;
  private:
  int _internal_positionsnakepart_size() const;
  public:
  void clear_positionsnakepart();
  ::network::PositionSnakePart* mutable_positionsnakepart(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::PositionSnakePart >*
      mutable_positionsnakepart();
  private:
  const ::network::PositionSnakePart& _internal_positionsnakepart(int index) const;
  ::network::PositionSnakePart* _internal_add_positionsnakepart();
  public:
  const ::network::PositionSnakePart& positionsnakepart(int index) const;
  ::network::PositionSnakePart* add_positionsnakepart();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::PositionSnakePart >&
      positionsnakepart() const;

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .network.Snake.RGBColor color = 3;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  ::network::Snake_RGBColor color() const;
  void set_color(::network::Snake_RGBColor value);
  private:
  ::network::Snake_RGBColor _internal_color() const;
  void _internal_set_color(::network::Snake_RGBColor value);
  public:

  // required bool life = 4;
  bool has_life() const;
  private:
  bool _internal_has_life() const;
  public:
  void clear_life();
  bool life() const;
  void set_life(bool value);
  private:
  bool _internal_life() const;
  void _internal_set_life(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.Snake)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::PositionSnakePart > positionsnakepart_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int color_;
  bool life_;
  friend struct ::TableStruct_network_2eprotoc;
};
// -------------------------------------------------------------------

class FromServerToClient :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.FromServerToClient) */ {
 public:
  FromServerToClient();
  virtual ~FromServerToClient();

  FromServerToClient(const FromServerToClient& from);
  FromServerToClient(FromServerToClient&& from) noexcept
    : FromServerToClient() {
    *this = ::std::move(from);
  }

  inline FromServerToClient& operator=(const FromServerToClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline FromServerToClient& operator=(FromServerToClient&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FromServerToClient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FromServerToClient* internal_default_instance() {
    return reinterpret_cast<const FromServerToClient*>(
               &_FromServerToClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FromServerToClient& a, FromServerToClient& b) {
    a.Swap(&b);
  }
  inline void Swap(FromServerToClient* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FromServerToClient* New() const final {
    return CreateMaybeMessage<FromServerToClient>(nullptr);
  }

  FromServerToClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FromServerToClient>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FromServerToClient& from);
  void MergeFrom(const FromServerToClient& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FromServerToClient* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.FromServerToClient";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eprotoc);
    return ::descriptor_table_network_2eprotoc.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnakesGameFieldNumber = 3,
    kStrawberryFieldNumber = 4,
    kGameoverFieldNumber = 1,
    kYouCanAddAPartFieldNumber = 2,
  };
  // repeated .network.Snake snakes_game = 3;
  int snakes_game_size() const;
  private:
  int _internal_snakes_game_size() const;
  public:
  void clear_snakes_game();
  ::network::Snake* mutable_snakes_game(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::Snake >*
      mutable_snakes_game();
  private:
  const ::network::Snake& _internal_snakes_game(int index) const;
  ::network::Snake* _internal_add_snakes_game();
  public:
  const ::network::Snake& snakes_game(int index) const;
  ::network::Snake* add_snakes_game();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::Snake >&
      snakes_game() const;

  // repeated .network.StrawBerry strawberry = 4;
  int strawberry_size() const;
  private:
  int _internal_strawberry_size() const;
  public:
  void clear_strawberry();
  ::network::StrawBerry* mutable_strawberry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::StrawBerry >*
      mutable_strawberry();
  private:
  const ::network::StrawBerry& _internal_strawberry(int index) const;
  ::network::StrawBerry* _internal_add_strawberry();
  public:
  const ::network::StrawBerry& strawberry(int index) const;
  ::network::StrawBerry* add_strawberry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::StrawBerry >&
      strawberry() const;

  // required bool gameover = 1 [default = false];
  bool has_gameover() const;
  private:
  bool _internal_has_gameover() const;
  public:
  void clear_gameover();
  bool gameover() const;
  void set_gameover(bool value);
  private:
  bool _internal_gameover() const;
  void _internal_set_gameover(bool value);
  public:

  // required bool youCanAddAPart = 2;
  bool has_youcanaddapart() const;
  private:
  bool _internal_has_youcanaddapart() const;
  public:
  void clear_youcanaddapart();
  bool youcanaddapart() const;
  void set_youcanaddapart(bool value);
  private:
  bool _internal_youcanaddapart() const;
  void _internal_set_youcanaddapart(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.FromServerToClient)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::Snake > snakes_game_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::StrawBerry > strawberry_;
  bool gameover_;
  bool youcanaddapart_;
  friend struct ::TableStruct_network_2eprotoc;
};
// -------------------------------------------------------------------

class FromClientToServer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.FromClientToServer) */ {
 public:
  FromClientToServer();
  virtual ~FromClientToServer();

  FromClientToServer(const FromClientToServer& from);
  FromClientToServer(FromClientToServer&& from) noexcept
    : FromClientToServer() {
    *this = ::std::move(from);
  }

  inline FromClientToServer& operator=(const FromClientToServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline FromClientToServer& operator=(FromClientToServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FromClientToServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FromClientToServer* internal_default_instance() {
    return reinterpret_cast<const FromClientToServer*>(
               &_FromClientToServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FromClientToServer& a, FromClientToServer& b) {
    a.Swap(&b);
  }
  inline void Swap(FromClientToServer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FromClientToServer* New() const final {
    return CreateMaybeMessage<FromClientToServer>(nullptr);
  }

  FromClientToServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FromClientToServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FromClientToServer& from);
  void MergeFrom(const FromClientToServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FromClientToServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.FromClientToServer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eprotoc);
    return ::descriptor_table_network_2eprotoc.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FromClientToServer_TypesOfHit TypesOfHit;
  static constexpr TypesOfHit NOTHING =
    FromClientToServer_TypesOfHit_NOTHING;
  static constexpr TypesOfHit SNAKE =
    FromClientToServer_TypesOfHit_SNAKE;
  static constexpr TypesOfHit STRAWBERRY =
    FromClientToServer_TypesOfHit_STRAWBERRY;
  static constexpr TypesOfHit WALL =
    FromClientToServer_TypesOfHit_WALL;
  static inline bool TypesOfHit_IsValid(int value) {
    return FromClientToServer_TypesOfHit_IsValid(value);
  }
  static constexpr TypesOfHit TypesOfHit_MIN =
    FromClientToServer_TypesOfHit_TypesOfHit_MIN;
  static constexpr TypesOfHit TypesOfHit_MAX =
    FromClientToServer_TypesOfHit_TypesOfHit_MAX;
  static constexpr int TypesOfHit_ARRAYSIZE =
    FromClientToServer_TypesOfHit_TypesOfHit_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TypesOfHit_descriptor() {
    return FromClientToServer_TypesOfHit_descriptor();
  }
  template<typename T>
  static inline const std::string& TypesOfHit_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TypesOfHit>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TypesOfHit_Name.");
    return FromClientToServer_TypesOfHit_Name(enum_t_value);
  }
  static inline bool TypesOfHit_Parse(const std::string& name,
      TypesOfHit* value) {
    return FromClientToServer_TypesOfHit_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSnakeclientFieldNumber = 1,
    kHitwithFieldNumber = 2,
  };
  // required .network.Snake snakeclient = 1;
  bool has_snakeclient() const;
  private:
  bool _internal_has_snakeclient() const;
  public:
  void clear_snakeclient();
  const ::network::Snake& snakeclient() const;
  ::network::Snake* release_snakeclient();
  ::network::Snake* mutable_snakeclient();
  void set_allocated_snakeclient(::network::Snake* snakeclient);
  private:
  const ::network::Snake& _internal_snakeclient() const;
  ::network::Snake* _internal_mutable_snakeclient();
  public:

  // required .network.FromClientToServer.TypesOfHit hitwith = 2;
  bool has_hitwith() const;
  private:
  bool _internal_has_hitwith() const;
  public:
  void clear_hitwith();
  ::network::FromClientToServer_TypesOfHit hitwith() const;
  void set_hitwith(::network::FromClientToServer_TypesOfHit value);
  private:
  ::network::FromClientToServer_TypesOfHit _internal_hitwith() const;
  void _internal_set_hitwith(::network::FromClientToServer_TypesOfHit value);
  public:

  // @@protoc_insertion_point(class_scope:network.FromClientToServer)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::network::Snake* snakeclient_;
  int hitwith_;
  friend struct ::TableStruct_network_2eprotoc;
};
// -------------------------------------------------------------------

class FirstMessageFromServerToClient :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.FirstMessageFromServerToClient) */ {
 public:
  FirstMessageFromServerToClient();
  virtual ~FirstMessageFromServerToClient();

  FirstMessageFromServerToClient(const FirstMessageFromServerToClient& from);
  FirstMessageFromServerToClient(FirstMessageFromServerToClient&& from) noexcept
    : FirstMessageFromServerToClient() {
    *this = ::std::move(from);
  }

  inline FirstMessageFromServerToClient& operator=(const FirstMessageFromServerToClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirstMessageFromServerToClient& operator=(FirstMessageFromServerToClient&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirstMessageFromServerToClient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirstMessageFromServerToClient* internal_default_instance() {
    return reinterpret_cast<const FirstMessageFromServerToClient*>(
               &_FirstMessageFromServerToClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FirstMessageFromServerToClient& a, FirstMessageFromServerToClient& b) {
    a.Swap(&b);
  }
  inline void Swap(FirstMessageFromServerToClient* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirstMessageFromServerToClient* New() const final {
    return CreateMaybeMessage<FirstMessageFromServerToClient>(nullptr);
  }

  FirstMessageFromServerToClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirstMessageFromServerToClient>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirstMessageFromServerToClient& from);
  void MergeFrom(const FirstMessageFromServerToClient& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirstMessageFromServerToClient* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.FirstMessageFromServerToClient";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eprotoc);
    return ::descriptor_table_network_2eprotoc.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FirstMessageFromServerToClient_eYouAre eYouAre;
  static constexpr eYouAre WAITING_IN_LOBBY =
    FirstMessageFromServerToClient_eYouAre_WAITING_IN_LOBBY;
  static constexpr eYouAre WAITING_TO_FINISH_GAME =
    FirstMessageFromServerToClient_eYouAre_WAITING_TO_FINISH_GAME;
  static constexpr eYouAre START_GAME =
    FirstMessageFromServerToClient_eYouAre_START_GAME;
  static constexpr eYouAre SERVER_FULL =
    FirstMessageFromServerToClient_eYouAre_SERVER_FULL;
  static inline bool eYouAre_IsValid(int value) {
    return FirstMessageFromServerToClient_eYouAre_IsValid(value);
  }
  static constexpr eYouAre eYouAre_MIN =
    FirstMessageFromServerToClient_eYouAre_eYouAre_MIN;
  static constexpr eYouAre eYouAre_MAX =
    FirstMessageFromServerToClient_eYouAre_eYouAre_MAX;
  static constexpr int eYouAre_ARRAYSIZE =
    FirstMessageFromServerToClient_eYouAre_eYouAre_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eYouAre_descriptor() {
    return FirstMessageFromServerToClient_eYouAre_descriptor();
  }
  template<typename T>
  static inline const std::string& eYouAre_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eYouAre>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eYouAre_Name.");
    return FirstMessageFromServerToClient_eYouAre_Name(enum_t_value);
  }
  static inline bool eYouAre_Parse(const std::string& name,
      eYouAre* value) {
    return FirstMessageFromServerToClient_eYouAre_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWallsFieldNumber = 1,
    kColorFieldNumber = 2,
    kIdtogiveFieldNumber = 3,
    kYouAreFieldNumber = 4,
  };
  // optional .network.PositionSnakePart walls = 1;
  bool has_walls() const;
  private:
  bool _internal_has_walls() const;
  public:
  void clear_walls();
  const ::network::PositionSnakePart& walls() const;
  ::network::PositionSnakePart* release_walls();
  ::network::PositionSnakePart* mutable_walls();
  void set_allocated_walls(::network::PositionSnakePart* walls);
  private:
  const ::network::PositionSnakePart& _internal_walls() const;
  ::network::PositionSnakePart* _internal_mutable_walls();
  public:

  // optional .network.Snake.RGBColor color = 2;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  ::network::Snake_RGBColor color() const;
  void set_color(::network::Snake_RGBColor value);
  private:
  ::network::Snake_RGBColor _internal_color() const;
  void _internal_set_color(::network::Snake_RGBColor value);
  public:

  // optional int32 idtogive = 3;
  bool has_idtogive() const;
  private:
  bool _internal_has_idtogive() const;
  public:
  void clear_idtogive();
  ::PROTOBUF_NAMESPACE_ID::int32 idtogive() const;
  void set_idtogive(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idtogive() const;
  void _internal_set_idtogive(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .network.FirstMessageFromServerToClient.eYouAre you_are = 4;
  bool has_you_are() const;
  private:
  bool _internal_has_you_are() const;
  public:
  void clear_you_are();
  ::network::FirstMessageFromServerToClient_eYouAre you_are() const;
  void set_you_are(::network::FirstMessageFromServerToClient_eYouAre value);
  private:
  ::network::FirstMessageFromServerToClient_eYouAre _internal_you_are() const;
  void _internal_set_you_are(::network::FirstMessageFromServerToClient_eYouAre value);
  public:

  // @@protoc_insertion_point(class_scope:network.FirstMessageFromServerToClient)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::network::PositionSnakePart* walls_;
  int color_;
  ::PROTOBUF_NAMESPACE_ID::int32 idtogive_;
  int you_are_;
  friend struct ::TableStruct_network_2eprotoc;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PositionSnakePart

// required int32 pos_x = 1;
inline bool PositionSnakePart::_internal_has_pos_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PositionSnakePart::has_pos_x() const {
  return _internal_has_pos_x();
}
inline void PositionSnakePart::clear_pos_x() {
  pos_x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionSnakePart::_internal_pos_x() const {
  return pos_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionSnakePart::pos_x() const {
  // @@protoc_insertion_point(field_get:network.PositionSnakePart.pos_x)
  return _internal_pos_x();
}
inline void PositionSnakePart::_internal_set_pos_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  pos_x_ = value;
}
inline void PositionSnakePart::set_pos_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:network.PositionSnakePart.pos_x)
}

// required int32 pos_y = 2;
inline bool PositionSnakePart::_internal_has_pos_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PositionSnakePart::has_pos_y() const {
  return _internal_has_pos_y();
}
inline void PositionSnakePart::clear_pos_y() {
  pos_y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionSnakePart::_internal_pos_y() const {
  return pos_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionSnakePart::pos_y() const {
  // @@protoc_insertion_point(field_get:network.PositionSnakePart.pos_y)
  return _internal_pos_y();
}
inline void PositionSnakePart::_internal_set_pos_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  pos_y_ = value;
}
inline void PositionSnakePart::set_pos_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:network.PositionSnakePart.pos_y)
}

// -------------------------------------------------------------------

// StrawBerry

// required int32 pos_x = 1;
inline bool StrawBerry::_internal_has_pos_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StrawBerry::has_pos_x() const {
  return _internal_has_pos_x();
}
inline void StrawBerry::clear_pos_x() {
  pos_x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StrawBerry::_internal_pos_x() const {
  return pos_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StrawBerry::pos_x() const {
  // @@protoc_insertion_point(field_get:network.StrawBerry.pos_x)
  return _internal_pos_x();
}
inline void StrawBerry::_internal_set_pos_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  pos_x_ = value;
}
inline void StrawBerry::set_pos_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:network.StrawBerry.pos_x)
}

// required int32 pos_y = 2;
inline bool StrawBerry::_internal_has_pos_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StrawBerry::has_pos_y() const {
  return _internal_has_pos_y();
}
inline void StrawBerry::clear_pos_y() {
  pos_y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StrawBerry::_internal_pos_y() const {
  return pos_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StrawBerry::pos_y() const {
  // @@protoc_insertion_point(field_get:network.StrawBerry.pos_y)
  return _internal_pos_y();
}
inline void StrawBerry::_internal_set_pos_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  pos_y_ = value;
}
inline void StrawBerry::set_pos_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:network.StrawBerry.pos_y)
}

// required int32 id = 3;
inline bool StrawBerry::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StrawBerry::has_id() const {
  return _internal_has_id();
}
inline void StrawBerry::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StrawBerry::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StrawBerry::id() const {
  // @@protoc_insertion_point(field_get:network.StrawBerry.id)
  return _internal_id();
}
inline void StrawBerry::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void StrawBerry::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.StrawBerry.id)
}

// required bool life = 4;
inline bool StrawBerry::_internal_has_life() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StrawBerry::has_life() const {
  return _internal_has_life();
}
inline void StrawBerry::clear_life() {
  life_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool StrawBerry::_internal_life() const {
  return life_;
}
inline bool StrawBerry::life() const {
  // @@protoc_insertion_point(field_get:network.StrawBerry.life)
  return _internal_life();
}
inline void StrawBerry::_internal_set_life(bool value) {
  _has_bits_[0] |= 0x00000008u;
  life_ = value;
}
inline void StrawBerry::set_life(bool value) {
  _internal_set_life(value);
  // @@protoc_insertion_point(field_set:network.StrawBerry.life)
}

// -------------------------------------------------------------------

// Snake

// required int32 id = 1;
inline bool Snake::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Snake::has_id() const {
  return _internal_has_id();
}
inline void Snake::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Snake::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Snake::id() const {
  // @@protoc_insertion_point(field_get:network.Snake.id)
  return _internal_id();
}
inline void Snake::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void Snake::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:network.Snake.id)
}

// repeated .network.PositionSnakePart positionsnakepart = 2;
inline int Snake::_internal_positionsnakepart_size() const {
  return positionsnakepart_.size();
}
inline int Snake::positionsnakepart_size() const {
  return _internal_positionsnakepart_size();
}
inline void Snake::clear_positionsnakepart() {
  positionsnakepart_.Clear();
}
inline ::network::PositionSnakePart* Snake::mutable_positionsnakepart(int index) {
  // @@protoc_insertion_point(field_mutable:network.Snake.positionsnakepart)
  return positionsnakepart_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::PositionSnakePart >*
Snake::mutable_positionsnakepart() {
  // @@protoc_insertion_point(field_mutable_list:network.Snake.positionsnakepart)
  return &positionsnakepart_;
}
inline const ::network::PositionSnakePart& Snake::_internal_positionsnakepart(int index) const {
  return positionsnakepart_.Get(index);
}
inline const ::network::PositionSnakePart& Snake::positionsnakepart(int index) const {
  // @@protoc_insertion_point(field_get:network.Snake.positionsnakepart)
  return _internal_positionsnakepart(index);
}
inline ::network::PositionSnakePart* Snake::_internal_add_positionsnakepart() {
  return positionsnakepart_.Add();
}
inline ::network::PositionSnakePart* Snake::add_positionsnakepart() {
  // @@protoc_insertion_point(field_add:network.Snake.positionsnakepart)
  return _internal_add_positionsnakepart();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::PositionSnakePart >&
Snake::positionsnakepart() const {
  // @@protoc_insertion_point(field_list:network.Snake.positionsnakepart)
  return positionsnakepart_;
}

// required .network.Snake.RGBColor color = 3;
inline bool Snake::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Snake::has_color() const {
  return _internal_has_color();
}
inline void Snake::clear_color() {
  color_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::network::Snake_RGBColor Snake::_internal_color() const {
  return static_cast< ::network::Snake_RGBColor >(color_);
}
inline ::network::Snake_RGBColor Snake::color() const {
  // @@protoc_insertion_point(field_get:network.Snake.color)
  return _internal_color();
}
inline void Snake::_internal_set_color(::network::Snake_RGBColor value) {
  assert(::network::Snake_RGBColor_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  color_ = value;
}
inline void Snake::set_color(::network::Snake_RGBColor value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:network.Snake.color)
}

// required bool life = 4;
inline bool Snake::_internal_has_life() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Snake::has_life() const {
  return _internal_has_life();
}
inline void Snake::clear_life() {
  life_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Snake::_internal_life() const {
  return life_;
}
inline bool Snake::life() const {
  // @@protoc_insertion_point(field_get:network.Snake.life)
  return _internal_life();
}
inline void Snake::_internal_set_life(bool value) {
  _has_bits_[0] |= 0x00000004u;
  life_ = value;
}
inline void Snake::set_life(bool value) {
  _internal_set_life(value);
  // @@protoc_insertion_point(field_set:network.Snake.life)
}

// -------------------------------------------------------------------

// FromServerToClient

// required bool gameover = 1 [default = false];
inline bool FromServerToClient::_internal_has_gameover() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FromServerToClient::has_gameover() const {
  return _internal_has_gameover();
}
inline void FromServerToClient::clear_gameover() {
  gameover_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool FromServerToClient::_internal_gameover() const {
  return gameover_;
}
inline bool FromServerToClient::gameover() const {
  // @@protoc_insertion_point(field_get:network.FromServerToClient.gameover)
  return _internal_gameover();
}
inline void FromServerToClient::_internal_set_gameover(bool value) {
  _has_bits_[0] |= 0x00000001u;
  gameover_ = value;
}
inline void FromServerToClient::set_gameover(bool value) {
  _internal_set_gameover(value);
  // @@protoc_insertion_point(field_set:network.FromServerToClient.gameover)
}

// required bool youCanAddAPart = 2;
inline bool FromServerToClient::_internal_has_youcanaddapart() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FromServerToClient::has_youcanaddapart() const {
  return _internal_has_youcanaddapart();
}
inline void FromServerToClient::clear_youcanaddapart() {
  youcanaddapart_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool FromServerToClient::_internal_youcanaddapart() const {
  return youcanaddapart_;
}
inline bool FromServerToClient::youcanaddapart() const {
  // @@protoc_insertion_point(field_get:network.FromServerToClient.youCanAddAPart)
  return _internal_youcanaddapart();
}
inline void FromServerToClient::_internal_set_youcanaddapart(bool value) {
  _has_bits_[0] |= 0x00000002u;
  youcanaddapart_ = value;
}
inline void FromServerToClient::set_youcanaddapart(bool value) {
  _internal_set_youcanaddapart(value);
  // @@protoc_insertion_point(field_set:network.FromServerToClient.youCanAddAPart)
}

// repeated .network.Snake snakes_game = 3;
inline int FromServerToClient::_internal_snakes_game_size() const {
  return snakes_game_.size();
}
inline int FromServerToClient::snakes_game_size() const {
  return _internal_snakes_game_size();
}
inline void FromServerToClient::clear_snakes_game() {
  snakes_game_.Clear();
}
inline ::network::Snake* FromServerToClient::mutable_snakes_game(int index) {
  // @@protoc_insertion_point(field_mutable:network.FromServerToClient.snakes_game)
  return snakes_game_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::Snake >*
FromServerToClient::mutable_snakes_game() {
  // @@protoc_insertion_point(field_mutable_list:network.FromServerToClient.snakes_game)
  return &snakes_game_;
}
inline const ::network::Snake& FromServerToClient::_internal_snakes_game(int index) const {
  return snakes_game_.Get(index);
}
inline const ::network::Snake& FromServerToClient::snakes_game(int index) const {
  // @@protoc_insertion_point(field_get:network.FromServerToClient.snakes_game)
  return _internal_snakes_game(index);
}
inline ::network::Snake* FromServerToClient::_internal_add_snakes_game() {
  return snakes_game_.Add();
}
inline ::network::Snake* FromServerToClient::add_snakes_game() {
  // @@protoc_insertion_point(field_add:network.FromServerToClient.snakes_game)
  return _internal_add_snakes_game();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::Snake >&
FromServerToClient::snakes_game() const {
  // @@protoc_insertion_point(field_list:network.FromServerToClient.snakes_game)
  return snakes_game_;
}

// repeated .network.StrawBerry strawberry = 4;
inline int FromServerToClient::_internal_strawberry_size() const {
  return strawberry_.size();
}
inline int FromServerToClient::strawberry_size() const {
  return _internal_strawberry_size();
}
inline void FromServerToClient::clear_strawberry() {
  strawberry_.Clear();
}
inline ::network::StrawBerry* FromServerToClient::mutable_strawberry(int index) {
  // @@protoc_insertion_point(field_mutable:network.FromServerToClient.strawberry)
  return strawberry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::StrawBerry >*
FromServerToClient::mutable_strawberry() {
  // @@protoc_insertion_point(field_mutable_list:network.FromServerToClient.strawberry)
  return &strawberry_;
}
inline const ::network::StrawBerry& FromServerToClient::_internal_strawberry(int index) const {
  return strawberry_.Get(index);
}
inline const ::network::StrawBerry& FromServerToClient::strawberry(int index) const {
  // @@protoc_insertion_point(field_get:network.FromServerToClient.strawberry)
  return _internal_strawberry(index);
}
inline ::network::StrawBerry* FromServerToClient::_internal_add_strawberry() {
  return strawberry_.Add();
}
inline ::network::StrawBerry* FromServerToClient::add_strawberry() {
  // @@protoc_insertion_point(field_add:network.FromServerToClient.strawberry)
  return _internal_add_strawberry();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::StrawBerry >&
FromServerToClient::strawberry() const {
  // @@protoc_insertion_point(field_list:network.FromServerToClient.strawberry)
  return strawberry_;
}

// -------------------------------------------------------------------

// FromClientToServer

// required .network.Snake snakeclient = 1;
inline bool FromClientToServer::_internal_has_snakeclient() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || snakeclient_ != nullptr);
  return value;
}
inline bool FromClientToServer::has_snakeclient() const {
  return _internal_has_snakeclient();
}
inline void FromClientToServer::clear_snakeclient() {
  if (snakeclient_ != nullptr) snakeclient_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::network::Snake& FromClientToServer::_internal_snakeclient() const {
  const ::network::Snake* p = snakeclient_;
  return p != nullptr ? *p : *reinterpret_cast<const ::network::Snake*>(
      &::network::_Snake_default_instance_);
}
inline const ::network::Snake& FromClientToServer::snakeclient() const {
  // @@protoc_insertion_point(field_get:network.FromClientToServer.snakeclient)
  return _internal_snakeclient();
}
inline ::network::Snake* FromClientToServer::release_snakeclient() {
  // @@protoc_insertion_point(field_release:network.FromClientToServer.snakeclient)
  _has_bits_[0] &= ~0x00000001u;
  ::network::Snake* temp = snakeclient_;
  snakeclient_ = nullptr;
  return temp;
}
inline ::network::Snake* FromClientToServer::_internal_mutable_snakeclient() {
  _has_bits_[0] |= 0x00000001u;
  if (snakeclient_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::Snake>(GetArenaNoVirtual());
    snakeclient_ = p;
  }
  return snakeclient_;
}
inline ::network::Snake* FromClientToServer::mutable_snakeclient() {
  // @@protoc_insertion_point(field_mutable:network.FromClientToServer.snakeclient)
  return _internal_mutable_snakeclient();
}
inline void FromClientToServer::set_allocated_snakeclient(::network::Snake* snakeclient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete snakeclient_;
  }
  if (snakeclient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      snakeclient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snakeclient, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  snakeclient_ = snakeclient;
  // @@protoc_insertion_point(field_set_allocated:network.FromClientToServer.snakeclient)
}

// required .network.FromClientToServer.TypesOfHit hitwith = 2;
inline bool FromClientToServer::_internal_has_hitwith() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FromClientToServer::has_hitwith() const {
  return _internal_has_hitwith();
}
inline void FromClientToServer::clear_hitwith() {
  hitwith_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::network::FromClientToServer_TypesOfHit FromClientToServer::_internal_hitwith() const {
  return static_cast< ::network::FromClientToServer_TypesOfHit >(hitwith_);
}
inline ::network::FromClientToServer_TypesOfHit FromClientToServer::hitwith() const {
  // @@protoc_insertion_point(field_get:network.FromClientToServer.hitwith)
  return _internal_hitwith();
}
inline void FromClientToServer::_internal_set_hitwith(::network::FromClientToServer_TypesOfHit value) {
  assert(::network::FromClientToServer_TypesOfHit_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  hitwith_ = value;
}
inline void FromClientToServer::set_hitwith(::network::FromClientToServer_TypesOfHit value) {
  _internal_set_hitwith(value);
  // @@protoc_insertion_point(field_set:network.FromClientToServer.hitwith)
}

// -------------------------------------------------------------------

// FirstMessageFromServerToClient

// optional .network.PositionSnakePart walls = 1;
inline bool FirstMessageFromServerToClient::_internal_has_walls() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || walls_ != nullptr);
  return value;
}
inline bool FirstMessageFromServerToClient::has_walls() const {
  return _internal_has_walls();
}
inline void FirstMessageFromServerToClient::clear_walls() {
  if (walls_ != nullptr) walls_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::network::PositionSnakePart& FirstMessageFromServerToClient::_internal_walls() const {
  const ::network::PositionSnakePart* p = walls_;
  return p != nullptr ? *p : *reinterpret_cast<const ::network::PositionSnakePart*>(
      &::network::_PositionSnakePart_default_instance_);
}
inline const ::network::PositionSnakePart& FirstMessageFromServerToClient::walls() const {
  // @@protoc_insertion_point(field_get:network.FirstMessageFromServerToClient.walls)
  return _internal_walls();
}
inline ::network::PositionSnakePart* FirstMessageFromServerToClient::release_walls() {
  // @@protoc_insertion_point(field_release:network.FirstMessageFromServerToClient.walls)
  _has_bits_[0] &= ~0x00000001u;
  ::network::PositionSnakePart* temp = walls_;
  walls_ = nullptr;
  return temp;
}
inline ::network::PositionSnakePart* FirstMessageFromServerToClient::_internal_mutable_walls() {
  _has_bits_[0] |= 0x00000001u;
  if (walls_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::PositionSnakePart>(GetArenaNoVirtual());
    walls_ = p;
  }
  return walls_;
}
inline ::network::PositionSnakePart* FirstMessageFromServerToClient::mutable_walls() {
  // @@protoc_insertion_point(field_mutable:network.FirstMessageFromServerToClient.walls)
  return _internal_mutable_walls();
}
inline void FirstMessageFromServerToClient::set_allocated_walls(::network::PositionSnakePart* walls) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete walls_;
  }
  if (walls) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      walls = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, walls, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  walls_ = walls;
  // @@protoc_insertion_point(field_set_allocated:network.FirstMessageFromServerToClient.walls)
}

// optional .network.Snake.RGBColor color = 2;
inline bool FirstMessageFromServerToClient::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FirstMessageFromServerToClient::has_color() const {
  return _internal_has_color();
}
inline void FirstMessageFromServerToClient::clear_color() {
  color_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::network::Snake_RGBColor FirstMessageFromServerToClient::_internal_color() const {
  return static_cast< ::network::Snake_RGBColor >(color_);
}
inline ::network::Snake_RGBColor FirstMessageFromServerToClient::color() const {
  // @@protoc_insertion_point(field_get:network.FirstMessageFromServerToClient.color)
  return _internal_color();
}
inline void FirstMessageFromServerToClient::_internal_set_color(::network::Snake_RGBColor value) {
  assert(::network::Snake_RGBColor_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  color_ = value;
}
inline void FirstMessageFromServerToClient::set_color(::network::Snake_RGBColor value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:network.FirstMessageFromServerToClient.color)
}

// optional int32 idtogive = 3;
inline bool FirstMessageFromServerToClient::_internal_has_idtogive() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FirstMessageFromServerToClient::has_idtogive() const {
  return _internal_has_idtogive();
}
inline void FirstMessageFromServerToClient::clear_idtogive() {
  idtogive_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FirstMessageFromServerToClient::_internal_idtogive() const {
  return idtogive_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FirstMessageFromServerToClient::idtogive() const {
  // @@protoc_insertion_point(field_get:network.FirstMessageFromServerToClient.idtogive)
  return _internal_idtogive();
}
inline void FirstMessageFromServerToClient::_internal_set_idtogive(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  idtogive_ = value;
}
inline void FirstMessageFromServerToClient::set_idtogive(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idtogive(value);
  // @@protoc_insertion_point(field_set:network.FirstMessageFromServerToClient.idtogive)
}

// required .network.FirstMessageFromServerToClient.eYouAre you_are = 4;
inline bool FirstMessageFromServerToClient::_internal_has_you_are() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FirstMessageFromServerToClient::has_you_are() const {
  return _internal_has_you_are();
}
inline void FirstMessageFromServerToClient::clear_you_are() {
  you_are_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::network::FirstMessageFromServerToClient_eYouAre FirstMessageFromServerToClient::_internal_you_are() const {
  return static_cast< ::network::FirstMessageFromServerToClient_eYouAre >(you_are_);
}
inline ::network::FirstMessageFromServerToClient_eYouAre FirstMessageFromServerToClient::you_are() const {
  // @@protoc_insertion_point(field_get:network.FirstMessageFromServerToClient.you_are)
  return _internal_you_are();
}
inline void FirstMessageFromServerToClient::_internal_set_you_are(::network::FirstMessageFromServerToClient_eYouAre value) {
  assert(::network::FirstMessageFromServerToClient_eYouAre_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  you_are_ = value;
}
inline void FirstMessageFromServerToClient::set_you_are(::network::FirstMessageFromServerToClient_eYouAre value) {
  _internal_set_you_are(value);
  // @@protoc_insertion_point(field_set:network.FirstMessageFromServerToClient.you_are)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace network

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::network::Snake_RGBColor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network::Snake_RGBColor>() {
  return ::network::Snake_RGBColor_descriptor();
}
template <> struct is_proto_enum< ::network::FromClientToServer_TypesOfHit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network::FromClientToServer_TypesOfHit>() {
  return ::network::FromClientToServer_TypesOfHit_descriptor();
}
template <> struct is_proto_enum< ::network::FirstMessageFromServerToClient_eYouAre> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network::FirstMessageFromServerToClient_eYouAre>() {
  return ::network::FirstMessageFromServerToClient_eYouAre_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_network_2eprotoc
